import unittest
import numpy as np
from qforte import qforte
from qforte.qkd import qk_helpers
from qforte.qkd import mrsqk_helpers

class QKDTests(unittest.TestCase):
    def test_H4_fast_qkd(self):
        print('\n'),
        # The FCI energy for H4 at 1.5 Angstrom in a sto-6g basis
        E_fci = -2.0126741263939656

        # The He hamilitonian
        circ_vec = [
        qforte.QuantumCircuit(),
         qforte.build_circuit('Z_0'),
         qforte.build_circuit('Y_0 Z_1 Z_2 Z_3 Y_4'),
         qforte.build_circuit('X_0 Z_1 Z_2 Z_3 X_4'),
         qforte.build_circuit('Z_1'),
         qforte.build_circuit('Y_1 Z_2 Z_3 Z_4 Y_5'),
         qforte.build_circuit('X_1 Z_2 Z_3 Z_4 X_5'),
         qforte.build_circuit('Z_2'),
         qforte.build_circuit('Y_2 Z_3 Z_4 Z_5 Y_6'),
         qforte.build_circuit('X_2 Z_3 Z_4 Z_5 X_6'),
         qforte.build_circuit('Z_3'),
         qforte.build_circuit('Y_3 Z_4 Z_5 Z_6 Y_7'),
         qforte.build_circuit('X_3 Z_4 Z_5 Z_6 X_7'),
         qforte.build_circuit('Z_4'),
         qforte.build_circuit('Z_5'),
         qforte.build_circuit('Z_6'),
         qforte.build_circuit('Z_7'),
         qforte.build_circuit('Z_0 Z_1'),
         qforte.build_circuit('Y_0 Z_2 Z_3 Y_4'),
         qforte.build_circuit('X_0 Z_2 Z_3 X_4'),
         qforte.build_circuit('Y_0 X_1 X_2 Y_3'),
         qforte.build_circuit('X_0 X_1 Y_2 Y_3'),
         qforte.build_circuit('Y_0 Y_1 X_2 X_3'),
         qforte.build_circuit('X_0 Y_1 Y_2 X_3'),
         qforte.build_circuit('Y_0 X_1 X_3 Z_4 Z_5 Y_6'),
         qforte.build_circuit('X_0 X_1 X_3 Z_4 Z_5 X_6'),
         qforte.build_circuit('Y_0 Y_1 Y_3 Z_4 Z_5 Y_6'),
         qforte.build_circuit('X_0 Y_1 Y_3 Z_4 Z_5 X_6'),
         qforte.build_circuit('Z_0 Y_1 Z_2 Z_3 Z_4 Y_5'),
         qforte.build_circuit('Z_0 X_1 Z_2 Z_3 Z_4 X_5'),
         qforte.build_circuit('Y_0 X_1 X_4 Y_5'),
         qforte.build_circuit('X_0 X_1 Y_4 Y_5'),
         qforte.build_circuit('Y_0 Y_1 X_4 X_5'),
         qforte.build_circuit('X_0 Y_1 Y_4 X_5'),
         qforte.build_circuit('Y_0 X_1 X_2 Z_3 Z_4 Z_5 Z_6 Y_7'),
         qforte.build_circuit('X_0 X_1 Y_2 Z_3 Z_4 Z_5 Z_6 Y_7'),
         qforte.build_circuit('Y_0 Y_1 X_2 Z_3 Z_4 Z_5 Z_6 X_7'),
         qforte.build_circuit('X_0 Y_1 Y_2 Z_3 Z_4 Z_5 Z_6 X_7'),
         qforte.build_circuit('Y_0 X_1 X_6 Y_7'),
         qforte.build_circuit('X_0 X_1 Y_6 Y_7'),
         qforte.build_circuit('Y_0 Y_1 X_6 X_7'),
         qforte.build_circuit('X_0 Y_1 Y_6 X_7'),
         qforte.build_circuit('Z_0 Z_2'),
         qforte.build_circuit('Z_0 Y_2 Z_3 Z_4 Z_5 Y_6'),
         qforte.build_circuit('Z_0 X_2 Z_3 Z_4 Z_5 X_6'),
         qforte.build_circuit('Y_0 Z_1 Z_3 Y_4'),
         qforte.build_circuit('X_0 Z_1 Z_3 X_4'),
         qforte.build_circuit('Y_0 Z_1 X_2 X_4 Z_5 Y_6'),
         qforte.build_circuit('X_0 Z_1 X_2 X_4 Z_5 X_6'),
         qforte.build_circuit('X_0 Z_1 X_2 Y_4 Z_5 Y_6'),
         qforte.build_circuit('Y_0 Z_1 Y_2 X_4 Z_5 X_6'),
         qforte.build_circuit('Y_0 Z_1 Y_2 Y_4 Z_5 Y_6'),
         qforte.build_circuit('X_0 Z_1 Y_2 Y_4 Z_5 X_6'),
         qforte.build_circuit('Z_0 Z_3'),
         qforte.build_circuit('Y_0 Z_1 Z_2 Y_4'),
         qforte.build_circuit('X_0 Z_1 Z_2 X_4'),
         qforte.build_circuit('Y_0 Z_1 Y_2 Y_3 Z_4 Y_5'),
         qforte.build_circuit('X_0 Z_1 X_2 Y_3 Z_4 Y_5'),
         qforte.build_circuit('Y_0 Z_1 Y_2 X_3 Z_4 X_5'),
         qforte.build_circuit('X_0 Z_1 X_2 X_3 Z_4 X_5'),
         qforte.build_circuit('Y_0 Z_1 Z_2 X_3 X_5 Y_6'),
         qforte.build_circuit('X_0 Z_1 Z_2 X_3 X_5 X_6'),
         qforte.build_circuit('Y_0 Z_1 Z_2 Y_3 Y_5 Y_6'),
         qforte.build_circuit('X_0 Z_1 Z_2 Y_3 Y_5 X_6'),
         qforte.build_circuit('Z_0 Y_3 Z_4 Z_5 Z_6 Y_7'),
         qforte.build_circuit('Z_0 X_3 Z_4 Z_5 Z_6 X_7'),
         qforte.build_circuit('Y_0 Z_1 Z_2 X_3 X_4 Z_5 Z_6 Y_7'),
         qforte.build_circuit('X_0 Z_1 Z_2 X_3 Y_4 Z_5 Z_6 Y_7'),
         qforte.build_circuit('Y_0 Z_1 Z_2 Y_3 X_4 Z_5 Z_6 X_7'),
         qforte.build_circuit('X_0 Z_1 Z_2 Y_3 Y_4 Z_5 Z_6 X_7'),
         qforte.build_circuit('Z_0 Z_4'),
         qforte.build_circuit('Z_0 Z_5'),
         qforte.build_circuit('Y_0 Z_1 Z_2 Z_3 Y_4 Z_5'),
         qforte.build_circuit('X_0 Z_1 Z_2 Z_3 X_4 Z_5'),
         qforte.build_circuit('Y_0 Z_1 Y_2 Y_5 Z_6 Y_7'),
         qforte.build_circuit('X_0 Z_1 X_2 Y_5 Z_6 Y_7'),
         qforte.build_circuit('Y_0 Z_1 Y_2 X_5 Z_6 X_7'),
         qforte.build_circuit('X_0 Z_1 X_2 X_5 Z_6 X_7'),
         qforte.build_circuit('Y_0 Z_1 Z_2 Z_3 Z_4 X_5 X_6 Y_7'),
         qforte.build_circuit('X_0 Z_1 Z_2 Z_3 Z_4 X_5 Y_6 Y_7'),
         qforte.build_circuit('Y_0 Z_1 Z_2 Z_3 Z_4 Y_5 X_6 X_7'),
         qforte.build_circuit('X_0 Z_1 Z_2 Z_3 Z_4 Y_5 Y_6 X_7'),
         qforte.build_circuit('Z_0 Z_6'),
         qforte.build_circuit('Y_0 Z_1 Z_2 Z_3 Y_4 Z_6'),
         qforte.build_circuit('X_0 Z_1 Z_2 Z_3 X_4 Z_6'),
         qforte.build_circuit('Z_0 Z_7'),
         qforte.build_circuit('Y_0 Z_1 Z_2 Z_3 Y_4 Z_7'),
         qforte.build_circuit('X_0 Z_1 Z_2 Z_3 X_4 Z_7'),
         qforte.build_circuit('Z_1 Z_2'),
         qforte.build_circuit('Y_1 Z_3 Z_4 Y_5'),
         qforte.build_circuit('X_1 Z_3 Z_4 X_5'),
         qforte.build_circuit('Y_1 X_2 X_3 Y_4'),
         qforte.build_circuit('X_1 X_2 Y_3 Y_4'),
         qforte.build_circuit('Y_1 Y_2 X_3 X_4'),
         qforte.build_circuit('X_1 Y_2 Y_3 X_4'),
         qforte.build_circuit('Y_1 X_2 X_4 Z_5 Z_6 Y_7'),
         qforte.build_circuit('X_1 X_2 X_4 Z_5 Z_6 X_7'),
         qforte.build_circuit('Y_1 Y_2 Y_4 Z_5 Z_6 Y_7'),
         qforte.build_circuit('X_1 Y_2 Y_4 Z_5 Z_6 X_7'),
         qforte.build_circuit('Z_1 Y_2 Z_3 Z_4 Z_5 Y_6'),
         qforte.build_circuit('Z_1 X_2 Z_3 Z_4 Z_5 X_6'),
         qforte.build_circuit('Y_1 X_2 X_5 Y_6'),
         qforte.build_circuit('X_1 X_2 Y_5 Y_6'),
         qforte.build_circuit('Y_1 Y_2 X_5 X_6'),
         qforte.build_circuit('X_1 Y_2 Y_5 X_6'),
         qforte.build_circuit('Z_1 Z_3'),
         qforte.build_circuit('Z_1 Y_3 Z_4 Z_5 Z_6 Y_7'),
         qforte.build_circuit('Z_1 X_3 Z_4 Z_5 Z_6 X_7'),
         qforte.build_circuit('Y_1 Z_2 Z_4 Y_5'),
         qforte.build_circuit('X_1 Z_2 Z_4 X_5'),
         qforte.build_circuit('Y_1 Z_2 X_3 X_5 Z_6 Y_7'),
         qforte.build_circuit('X_1 Z_2 X_3 X_5 Z_6 X_7'),
         qforte.build_circuit('X_1 Z_2 X_3 Y_5 Z_6 Y_7'),
         qforte.build_circuit('Y_1 Z_2 Y_3 X_5 Z_6 X_7'),
         qforte.build_circuit('Y_1 Z_2 Y_3 Y_5 Z_6 Y_7'),
         qforte.build_circuit('X_1 Z_2 Y_3 Y_5 Z_6 X_7'),
         qforte.build_circuit('Z_1 Z_4'),
         qforte.build_circuit('Y_1 Z_2 Z_3 Y_5'),
         qforte.build_circuit('X_1 Z_2 Z_3 X_5'),
         qforte.build_circuit('Y_1 Z_2 Y_3 Y_4 Z_5 Y_6'),
         qforte.build_circuit('X_1 Z_2 X_3 Y_4 Z_5 Y_6'),
         qforte.build_circuit('Y_1 Z_2 Y_3 X_4 Z_5 X_6'),
         qforte.build_circuit('X_1 Z_2 X_3 X_4 Z_5 X_6'),
         qforte.build_circuit('Y_1 Z_2 Z_3 X_4 X_6 Y_7'),
         qforte.build_circuit('X_1 Z_2 Z_3 X_4 X_6 X_7'),
         qforte.build_circuit('Y_1 Z_2 Z_3 Y_4 Y_6 Y_7'),
         qforte.build_circuit('X_1 Z_2 Z_3 Y_4 Y_6 X_7'),
         qforte.build_circuit('Z_1 Z_5'),
         qforte.build_circuit('Z_1 Z_6'),
         qforte.build_circuit('Y_1 Z_2 Z_3 Z_4 Y_5 Z_6'),
         qforte.build_circuit('X_1 Z_2 Z_3 Z_4 X_5 Z_6'),
         qforte.build_circuit('Z_1 Z_7'),
         qforte.build_circuit('Y_1 Z_2 Z_3 Z_4 Y_5 Z_7'),
         qforte.build_circuit('X_1 Z_2 Z_3 Z_4 X_5 Z_7'),
         qforte.build_circuit('Z_2 Z_3'),
         qforte.build_circuit('Y_2 Z_4 Z_5 Y_6'),
         qforte.build_circuit('X_2 Z_4 Z_5 X_6'),
         qforte.build_circuit('Y_2 X_3 X_4 Y_5'),
         qforte.build_circuit('X_2 X_3 Y_4 Y_5'),
         qforte.build_circuit('Y_2 Y_3 X_4 X_5'),
         qforte.build_circuit('X_2 Y_3 Y_4 X_5'),
         qforte.build_circuit('Z_2 Y_3 Z_4 Z_5 Z_6 Y_7'),
         qforte.build_circuit('Z_2 X_3 Z_4 Z_5 Z_6 X_7'),
         qforte.build_circuit('Y_2 X_3 X_6 Y_7'),
         qforte.build_circuit('X_2 X_3 Y_6 Y_7'),
         qforte.build_circuit('Y_2 Y_3 X_6 X_7'),
         qforte.build_circuit('X_2 Y_3 Y_6 X_7'),
         qforte.build_circuit('Z_2 Z_4'),
         qforte.build_circuit('Y_2 Z_3 Z_5 Y_6'),
         qforte.build_circuit('X_2 Z_3 Z_5 X_6'),
         qforte.build_circuit('Z_2 Z_5'),
         qforte.build_circuit('Y_2 Z_3 Z_4 Y_6'),
         qforte.build_circuit('X_2 Z_3 Z_4 X_6'),
         qforte.build_circuit('Y_2 Z_3 Y_4 Y_5 Z_6 Y_7'),
         qforte.build_circuit('X_2 Z_3 X_4 Y_5 Z_6 Y_7'),
         qforte.build_circuit('Y_2 Z_3 Y_4 X_5 Z_6 X_7'),
         qforte.build_circuit('X_2 Z_3 X_4 X_5 Z_6 X_7'),
         qforte.build_circuit('Z_2 Z_6'),
         qforte.build_circuit('Z_2 Z_7'),
         qforte.build_circuit('Y_2 Z_3 Z_4 Z_5 Y_6 Z_7'),
         qforte.build_circuit('X_2 Z_3 Z_4 Z_5 X_6 Z_7'),
         qforte.build_circuit('Z_3 Z_4'),
         qforte.build_circuit('Y_3 Z_5 Z_6 Y_7'),
         qforte.build_circuit('X_3 Z_5 Z_6 X_7'),
         qforte.build_circuit('Y_3 X_4 X_5 Y_6'),
         qforte.build_circuit('X_3 X_4 Y_5 Y_6'),
         qforte.build_circuit('Y_3 Y_4 X_5 X_6'),
         qforte.build_circuit('X_3 Y_4 Y_5 X_6'),
         qforte.build_circuit('Z_3 Z_5'),
         qforte.build_circuit('Y_3 Z_4 Z_6 Y_7'),
         qforte.build_circuit('X_3 Z_4 Z_6 X_7'),
         qforte.build_circuit('Z_3 Z_6'),
         qforte.build_circuit('Y_3 Z_4 Z_5 Y_7'),
         qforte.build_circuit('X_3 Z_4 Z_5 X_7'),
         qforte.build_circuit('Z_3 Z_7'),
         qforte.build_circuit('Z_4 Z_5'),
         qforte.build_circuit('Y_4 X_5 X_6 Y_7'),
         qforte.build_circuit('X_4 X_5 Y_6 Y_7'),
         qforte.build_circuit('Y_4 Y_5 X_6 X_7'),
         qforte.build_circuit('X_4 Y_5 Y_6 X_7'),
         qforte.build_circuit('Z_4 Z_6'),
         qforte.build_circuit('Z_4 Z_7'),
         qforte.build_circuit('Z_5 Z_6'),
         qforte.build_circuit('Z_5 Z_7'),
         qforte.build_circuit('Z_6 Z_7')]

        coef_vec = [
        -0.939887,
        +0.121291,
        +0.006411,
        +0.006411,
        +0.121291,
        +0.006411,
        +0.006411,
        +0.073087,
        -0.010595,
        -0.010595,
        +0.073087,
        -0.010595,
        -0.010595,
        -0.004903,
        -0.004903,
        -0.097242,
        -0.097242,
        +0.101158,
        +0.016853,
        +0.016853,
        +0.039770,
        -0.039770,
        -0.039770,
        +0.039770,
        +0.009060,
        +0.009060,
        +0.009060,
        +0.009060,
        +0.016853,
        +0.016853,
        +0.028827,
        -0.028827,
        -0.028827,
        +0.028827,
        -0.009060,
        +0.009060,
        +0.009060,
        -0.009060,
        +0.027457,
        -0.027457,
        -0.027457,
        +0.027457,
        +0.050198,
        +0.008401,
        +0.008401,
        +0.016787,
        +0.016787,
        +0.008371,
        +0.019987,
        +0.011616,
        +0.011616,
        +0.019987,
        +0.008371,
        +0.089968,
        -0.004017,
        -0.004017,
        +0.020803,
        +0.020803,
        +0.020803,
        +0.020803,
        -0.020045,
        -0.020045,
        -0.020045,
        -0.020045,
        +0.017460,
        +0.017460,
        +0.028416,
        -0.028416,
        -0.028416,
        +0.028416,
        +0.062365,
        +0.091192,
        -0.002929,
        -0.002929,
        +0.040032,
        +0.040032,
        +0.040032,
        +0.040032,
        -0.008896,
        +0.008896,
        +0.008896,
        -0.008896,
        +0.077813,
        +0.008623,
        +0.008623,
        +0.105270,
        +0.017519,
        +0.017519,
        +0.089968,
        -0.004017,
        -0.004017,
        +0.020803,
        -0.020803,
        -0.020803,
        +0.020803,
        -0.020045,
        -0.020045,
        -0.020045,
        -0.020045,
        +0.017460,
        +0.017460,
        +0.028416,
        -0.028416,
        -0.028416,
        +0.028416,
        +0.050198,
        +0.008401,
        +0.008401,
        +0.016787,
        +0.016787,
        +0.008371,
        +0.019987,
        +0.011616,
        +0.011616,
        +0.019987,
        +0.008371,
        +0.091192,
        -0.002929,
        -0.002929,
        +0.040032,
        +0.040032,
        +0.040032,
        +0.040032,
        +0.008896,
        +0.008896,
        +0.008896,
        +0.008896,
        +0.062365,
        +0.105270,
        +0.017519,
        +0.017519,
        +0.077813,
        +0.008623,
        +0.008623,
        +0.094160,
        -0.002591,
        -0.002591,
        +0.035233,
        -0.035233,
        -0.035233,
        +0.035233,
        -0.002591,
        -0.002591,
        +0.029476,
        -0.029476,
        -0.029476,
        +0.029476,
        +0.058981,
        +0.018463,
        +0.018463,
        +0.094214,
        -0.003276,
        -0.003276,
        +0.021740,
        +0.021740,
        +0.021740,
        +0.021740,
        +0.064846,
        +0.094322,
        +0.018678,
        +0.018678,
        +0.094214,
        -0.003276,
        -0.003276,
        +0.021740,
        -0.021740,
        -0.021740,
        +0.021740,
        +0.058981,
        +0.018463,
        +0.018463,
        +0.094322,
        +0.018678,
        +0.018678,
        +0.064846,
        +0.097089,
        +0.042406,
        -0.042406,
        -0.042406,
        +0.042406,
        +0.053953,
        +0.096359,
        +0.096359,
        +0.053953,
        +0.112787]

        H4_qubit_hamiltonian = qforte.QuantumOperator()
        for i in range(len(circ_vec)):
            H4_qubit_hamiltonian.add_term(coef_vec[i], circ_vec[i])

        ref = [1,1,1,1,0,0,0,0]

        #code for fast qk (compared to FCI)
        s_mat, h_mat = qk_helpers.get_sr_mats_fast(ref,
                                                    1.0,
                                                    10,
                                                    H4_qubit_hamiltonian,
                                                    len(ref),
                                                    trot_number=100)

        evals, evecs = qk_helpers.canonical_geig_solve(s_mat, h_mat)
        evals_sorted = np.sort(evals)
        E = np.real(evals_sorted[0])
        self.assertLess(E-E_fci, 1.0e-5)

        #code for fast mrsqk (compared to FCI)
        # ref_lst = get_init_ref_lst(ref, 
        #                             3,
        #                             3,
        #                             0.25,
        #                             mol,
        #                             target_root=0,
        #                             fast=True,
        #                             use_phase_based_selection=False)
        #
        # s_mat, h_mat = get_mr_mats_fast(ref_lst,
        #                                 nstates_per_ref,
        #                                 dt_lst,
        #                                 H,
        #                                 nqubits,
        #                                 trot_number=1)

        #code for fast mrsqk (compared to exact trotter)

        # self.assertAlmostEqual(slow_Energy, fast_Energy)
        # self.assertLess(E_fci, slow_Energy)
        # self.assertLess(E_fci, fast_Energy)
        # self.assertLess(slow_Energy-E_fci, 1.0e-5)
        # self.assertLess(fast_Energy-E_fci, 1.0e-5)

if __name__ == '__main__':
    unittest.main()
